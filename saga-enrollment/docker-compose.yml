networks:
  saga-enrollment-network:

services:
  postgres:
    image: postgres:17
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: api-gateway
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres", "-d", "keycloak" ]
      interval: 10s
      timeout: 5s
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    networks:
      - saga-enrollment-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
  kafka1:
    image: confluentinc/cp-kafka:latest
    hostname: kafka1
    networks:
      - saga-enrollment-network
    ports:
      - "19092:19092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092,PLAINTEXT_INTERNAL://localhost:19092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  kafka-setup:
    image: confluentinc/cp-kafka:latest
    networks:
      - saga-enrollment-network
    depends_on:
      - kafka1
    entrypoint: [ "/bin/sh", "-c" ]
    command: |
      "
      # Wait for Kafka to be ready
      echo 'Waiting for Kafka to be ready...'
      cub kafka-ready -b kafka1:9092 1 30
      
      # Create topics
      echo 'Creating Kafka topics...'
      kafka-topics --bootstrap-server kafka1:9092 --create --if-not-exists --topic enrollment-course-not-found --partitions 1 --replication-factor 1
      kafka-topics --bootstrap-server kafka1:9092 --create --if-not-exists --topic enrollment-course-validated --partitions 1 --replication-factor 1
      kafka-topics --bootstrap-server kafka1:9092 --create --if-not-exists --topic enrollment-requests --partitions 1 --replication-factor 1
      
      echo 'Kafka topics created successfully'
      exit 0
      "

  akhq:
    image: tchiotludo/akhq:latest
    networks:
      - saga-enrollment-network
    depends_on:
      - kafka1
    ports:
      - "8090:8080"
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka1:9092"
  # api-gateway:
  #   image: saga-enrollment/api-gateway
  #   container_name: saga-enrollment-api-gateway
  #   build:
  #     context: api-gateway
  #     dockerfile: ./Dockerfile
  #   command: go run main.go
  #   develop:
  #     watch:
  #       - action: sync+restart
  #         path: ./api-gateway
  #         target: /app
  #   restart: unless-stopped
  #   ports:
  #     - "8080:8080"
  #   networks:
  #     - saga-enrollment-network
  # billing:
  #   image: saga-enrollment/billing
  #   container_name: saga-enrollment-billing
  #   build:
  #     context: billing-service
  #     dockerfile: ./Dockerfile
  #   command: go run main.go
  #   develop:
  #     watch:
  #       - action: sync+restart
  #         path: ./billing-service
  #         target: /app
  #   restart: unless-stopped
  #   networks:
  #     - saga-enrollment-network
# Add kafa, billing and courses services
